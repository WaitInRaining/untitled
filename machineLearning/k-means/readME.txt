优点：容易实现
缺点：可能收敛到局部最优值，在大规模数据上收敛较慢
使用数据类型：数值型

当簇近似于高斯分布的时候效果最好。
缺点：
在簇的平均值可被定义的时候才能使用，可能不适用于某些应用
必须给出k值，且初始敏感，对于不同的初值，可能产生不同的效果
不适合发现非凸形状的簇或者大小差别很大的簇
对噪声和孤立点敏感
可作为其他聚类的基础算法，如谱聚类




k-means伪代码：
创建k个点作为其起始质点（经常是随机选择）
当任意一个点的簇分配结果发生改变时
    对数据集中的每个数据点
        对每个质心
            计算质心到数据点之间的距离
        将数据点分配到距其最近的簇
    对每个簇，计算簇中所有点的均值并将均值作为质心

kmeans算法收敛但聚类效果较差的原因是，kmeans算法收敛到局部最小值而非全局最小值。

二分kmeans算法
为克服kmeans算法收敛于局部最小值的问题，提出二分kmeans算法。该算法首先将所有点作为一个簇，然后将该簇一份为二。
之后选择其中一个簇继续进行划分，选择哪一个簇进行划分取决于其划分是否可以最大程度降低SSE（误差平方和）的值。
不断进行划分，知道得到用户指定的簇数目为止。

流程：
将所有点看做一个簇
当簇数目小于k的时候：
    对每一个簇：
        计算总误差
        在给定的簇上面进行二分均值聚类
        计算将该簇一份为二的总误差
    选择使得误差最小的那个簇进行划分操作

还有一种做法是选择SSE最大的那个簇进行划分
